---
apiVersion: v1
kind: Namespace
metadata:
  name: tailscale
---
apiVersion: v1
kind: Secret
metadata:
  name: tailscale-auth
  namespace: tailscale
stringData:
  authkey: "tskey-auth-kzuHCBRkUY11CNTRL-o9vEgX1wk9fTGbGTEUNRAfLKE4sbDmz8"
---
# API Server Proxy - Exposes Kubernetes API through Tailscale
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-proxy
  namespace: tailscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-proxy
  template:
    metadata:
      labels:
        app: api-proxy
    spec:
      serviceAccountName: tailscale
      containers:
      - name: tailscale
        image: tailscale/tailscale:latest
        env:
        - name: TS_AUTHKEY
          valueFrom:
            secretKeyRef:
              name: tailscale-auth
              key: authkey
        - name: TS_HOSTNAME
          value: "k8s-api-proxy"
        - name: TS_ROUTES
          value: "10.100.0.1/32"
        - name: TS_EXTRA_ARGS
          value: "--accept-routes"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
        volumeMounts:
        - name: dev-net-tun
          mountPath: /dev/net/tun
      volumes:
      - name: dev-net-tun
        hostPath:
          path: /dev/net/tun
---
apiVersion: v1
kind: Service
metadata:
  name: api-proxy-service
  namespace: tailscale
spec:
  selector:
    app: api-proxy
  ports:
  - port: 6443
    targetPort: 6443
  type: ClusterIP
---
# Egress Proxy - Routes traffic through Tailscale
apiVersion: apps/v1
kind: Deployment
metadata:
  name: egress-proxy
  namespace: tailscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app: egress-proxy
  template:
    metadata:
      labels:
        app: egress-proxy
    spec:
      serviceAccountName: tailscale
      containers:
      - name: tailscale
        image: tailscale/tailscale:latest
        env:
        - name: TS_AUTHKEY
          valueFrom:
            secretKeyRef:
              name: tailscale-auth
              key: authkey
        - name: TS_HOSTNAME
          value: "k8s-egress"
        - name: TS_EXTRA_ARGS
          value: "--accept-routes"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
        volumeMounts:
        - name: dev-net-tun
          mountPath: /dev/net/tun
      volumes:
      - name: dev-net-tun
        hostPath:
          path: /dev/net/tun
---
# Subnet Router - Exposes pod/service networks via Tailscale
apiVersion: apps/v1
kind: Deployment
metadata:
  name: subnet-router
  namespace: tailscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app: subnet-router
  template:
    metadata:
      labels:
        app: subnet-router
    spec:
      serviceAccountName: tailscale
      containers:
      - name: tailscale
        image: tailscale/tailscale:latest
        env:
        - name: TS_AUTHKEY
          valueFrom:
            secretKeyRef:
              name: tailscale-auth
              key: authkey
        - name: TS_HOSTNAME
          value: "k8s-subnet-router"
        - name: TS_EXTRA_ARGS
          value: "--advertise-routes=10.0.0.0/16"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
        volumeMounts:
        - name: dev-net-tun
          mountPath: /dev/net/tun
      volumes:
      - name: dev-net-tun
        hostPath:
          path: /dev/net/tun
---
# Test Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-app
  namespace: tailscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-app
  template:
    metadata:
      labels:
        app: test-app
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
---
# Cluster Ingress - Manual Tailscale Proxy for Services
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-proxy
  namespace: tailscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-proxy
  template:
    metadata:
      labels:
        app: ingress-proxy
    spec:
      serviceAccountName: tailscale
      containers:
      - name: tailscale
        image: tailscale/tailscale:latest
        env:
        - name: TS_AUTHKEY
          valueFrom:
            secretKeyRef:
              name: tailscale-auth
              key: authkey
        - name: TS_HOSTNAME
          value: "k8s-ingress"
        - name: TS_EXTRA_ARGS
          value: "--accept-routes"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
        volumeMounts:
        - name: dev-net-tun
          mountPath: /dev/net/tun
      - name: nginx-proxy
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: dev-net-tun
        hostPath:
          path: /dev/net/tun
      - name: nginx-config
        configMap:
          name: ingress-nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-nginx-config
  namespace: tailscale
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        
        location / {
            proxy_pass http://test-app-service:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
